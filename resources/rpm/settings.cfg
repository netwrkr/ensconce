# This script can be used to override any config options specified
# in /opt/ensconce/defaults.cfg

# Set this to True (the default) if you are running behind Apache or other
# reverse proxy server.  Note that you *must* specify the scheme if it differs
# from the cherrypy server (e.g. when using ssl) in an X-Forwarded-Proto header:
#
#         RequestHeader X-Forwarded-Proto https
#
server.behind_proxy = True

# Configure Server Listen Addr
# You can use 0.0.0.0 to bind to all interfaces.
#
#server.socket_host = 127.0.0.1
#server.socket_port = 8282

# If you wish to have the SSL served by the python daemon directly (e.g.
# rather than reverse proxy from Apache)
#server.ssl_certificate = /path/to/cert.pem
#server.ssl_private_key = /path/to/key.pem
#server.ssl_certificate_chain = /path/to/concatenated-intermed-certs.pem

# UI Configuration

# If you run multiple Ensconce instances, you may find it helpful to provide a prefix
# for page titles:
# ui.title_prefix = [CORP]

# Database Configuration (SQLAlchemy)
# 
# e.g. postgres:
sqlalchemy.url = postgresql://ensconce@/ensconce
sqlalchemy.server_side_cursors = True
# e.g. mysql
# sqlalchemy.url = mysql+mysqlconnector://ensconce:ensconcepass@localhost/ensconce
# (Be sure to comment out the server_side_cursors if using MySQL)

# Log queries (at INFO level)? 
sqlalchemy.echo = False


# The authentcation providers.  You can specify multiple providers; the order
# specified is the order in which they will attempt to authenticate users.
# Default supported providers: ldap, db (internal)
#auth.provider = ldap, db

# LDAP URI
#ldap.url = ldap://ldap.example.com
#
# Use STARTLS encryption?
#ldap.start_tls = True
#
# Root node in LDAP from which to search for users and groups.  (If not specifying
# a bind DN, you may need to specify ldap.user_dn_pfx to further restrict.)
#ldap.basedn = "dc=example,dc=com"
#
# Prefix to add when searching for users (or to add to construct logged-in user DN when 
# not providing a binddn):
#ldap.userdn_pfx = "ou=Users"
#
# Prefix to add to restrict group searches.
#ldap.groupdn_pfx = "ou=Groups"
#
# Bind DN
#ldap.binddn = "ou=manager,ou=Users,dc=example,dc=com"
# Bind Password
#ldap.bindpw = password
#
# User Attribute (for constructing bind dn or search filter.
#ldap.userattr=uid
#
#ldap.cacert=/etc/pki/tls/certs/example.com.ca.crt
#ldap.cert=/path/to/client-cert.pem
#ldap.key=/path/to/client-key.pem
#
# Specify specific group DNs that are authorized to access this sytem. (i.e. user
# must be a member of one of these groups in order to be allowed to log in).
# NOTE: Each DN MUST be surrounded by quotes.
#ldap.authorized_groups = "cn=mygroup,ou=Group,dc=example,dc=com", "cn=other-group,ou=Group,dc=example,dc=com"

# Database Backups
# ----------------
#
# The sytem can be configured to dump a backup of the entire database, encrypted
# using symmetric encryption with a passphrase that is stored in the database.
# (So this can only work when the application is running and initialized.)
#
#backups.on = False
#backups.path = /var/lib/ensconce/backups
#backups.dir_mode = 0700
#backups.file_mode = 0600
#backups.encryption.password_id = <db-id-for-password-to-use>
#backups.interval_minutes = 360
#backups.remove_older_than_days = 30

# Configuring the webapp cookie-based sessions
#sessions.on = True
#sessions.path = /
#sessions.timeout = 30
#sessions.storage_type = file
#sessions.storage_path = /var/lib/data/sessions

# Exporters
# ---------

# Configure the KeePass exporter
#
#export.keepass.enabled = True
# Full (absolute) path to executable that converts GPG/YAML to KeePass DB.
#export.keepass.exe_path = /usr/bin/ensconce2keepass